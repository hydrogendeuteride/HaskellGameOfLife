type Pos = (Int, Int)
type Board = [[Int]]

row = 30
col = 50

width :: [[a]] -> Int
width = length

height :: [[a]] -> Int
height = length . (!! 0)

bData = "\
    \..................................................\
    \..................................................\
    \..................................................\
    \...............................X..................\
    \.............................X.X..................\
    \...................XX......XX............XX.......\
    \..................X...X....XX............XX.......\
    \.......XX........X.....X...XX.....................\
    \.......XX........X...X.XX....X.X..................\
    \.................X.....X.......X..................\
    \..................X...X...........................\
    \...................XX.............................\
    \..................................................\
    \..................................................\
    \..................................................\
    \..................................................\
    \..................................................\
    \..................................................\
    \..................................................\
    \..................................................\
    \..................................................\
    \..................................................\
    \..................................................\
    \..................................................\
    \..................................................\
    \..................................................\
    \..................................................\
    \..................................................\
    \..................................................\
    \.................................................."

inBoard :: Board -> Int -> Int -> Bool
inBoard b x y = (x `elem` [1..(width b)]) && ( y `elem` [1..(height b)])

arounds::Board -> Int -> Int -> [Pos]
arounds b x y = filter (uncurry $ inBoard b) [(x + x', y + y') | x' <- [-1..1], y' <- [-1..1], x' /= 0 || x' -y' /= 0]

isAlive :: Board -> Pos -> Bool
isAlive b (x, y) = b !! x !! y == 1

liveNeighbs ::Board -> Pos -> Int
liveNeighbs b (x, y) = isAlive2 (arounds b x y) where
    isAlive2 [] = 0
    isAlive2 (x:xs) = if isAlive b x
                            then 1 + isAlive2 xs
                        else
                            0 + isAlive2 xs

gameOfLife :: Board -> Board